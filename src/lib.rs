// Generated by Sideko (sideko.dev)
#![recursion_limit = "1024"]
pub mod request_types;
pub mod schemas;
use request_types::*;
use reqwest::blocking::Client as ReqwestClient;
use reqwest::Error as ReqwestError;
use schemas::*;

#[derive(Clone, Debug)]
pub struct Client {
    pub client: ReqwestClient,
    pub base_url: String,
}

#[derive(Debug, thiserror::Error)]
pub enum CannotFormRequest {
    #[error("Invalid data provided: {input}")]
    InvalidArguments { input: String },
    #[error("Unknown error forming the request")]
    UnknownError { msg: String },
}

#[derive(Clone, Debug)]
pub struct ErrorResponse {
    pub status_code: u16,
    pub message: String,
}

#[derive(Clone, Debug)]
pub enum Error {
    CannotFormRequest,
    ErrorResponse(ErrorResponse),
}

impl Client {
    pub fn new() -> Result<Self, ReqwestError> {
        let base_url = "https://hacker-news.firebaseio.com/v0".to_string();

        let mut default_headers = reqwest::header::HeaderMap::new();

        let client = ReqwestClient::builder()
            .default_headers(default_headers)
            .build()?;

        Ok(Self {
            client,
            base_url,
            
        })
    }

    pub fn get_ask_story_ids(&self, request: GetAskstoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/askstories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_best_story_ids(&self, request: GetBeststoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/beststories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_item(&self, request: GetItemIdJsonRequest) -> Result<Item, Error> {
        let endpoint = format!("/item/{}.json", request.id);
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Item = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_job_story_ids(&self, request: GetJobstoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/jobstories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_max_item_id(&self, request: GetMaxitemJsonRequest) -> Result<i64, Error> {
        let endpoint = "/maxitem.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: i64 = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_new_story_ids(&self, request: GetNewstoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/newstories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_show_story_ids(&self, request: GetShowstoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/showstories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_top_story_ids(&self, request: GetTopstoriesJsonRequest) -> Result<Vec<i64>, Error> {
        let endpoint = "/topstories.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: Vec<i64> = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_updates(&self, request: GetUpdatesJsonRequest) -> Result<GetUpdatesJsonResponse, Error> {
        let endpoint = "/updates.json";
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: GetUpdatesJsonResponse = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }
    pub fn get_user(&self, request: GetUserIdJsonRequest) -> Result<User, Error> {
        let endpoint = format!("/user/{}.json", request.id);
        let url = format!("{}{}", self.base_url, endpoint);

        let mut query_params: Vec<(&str, String)> = vec![];
        if let Some(print) = request.print {
            query_params.push(("print", format!("{:?}", &print)));
        }
        
        let response = self
            .client
            .get(url)
            .query(&query_params)
            
            .send()
            .unwrap();
        
        if response.status().is_success() {
            let response: User = response.json().unwrap();
            Ok(response)
        } else {
            let status_code = response.status().as_u16();
            let message = response.text().unwrap_or_default();
            let err = ErrorResponse { status_code, message };
            Err(Error::ErrorResponse(err))
        }
    }

}
